docker run --name mysql_mm_db -p 3306:3306 -e -d mysql/mysql-server:latest
docker logs mysql 2>&1 | grep GENERATED
ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';

CREATE USER 'root'@'ip_address' IDENTIFIED BY 'some_pass';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'ip_address';


============JS=============

require("dotenv").config({ path: "./express_rest_backend/.env"});

INSTEAD OF USING CALLBACKS I CAN USE:
let p = promise(
    (resolove,reject) => {
        if(resolveCondition){
            resolove("someSuccess");
        }else{
            reject("someError");
        }
    }
);

p.then(funcToCallIfResolved).catch(funcToCallIfRejected);


/*
GeoLocModel.setByUsername("user_c2436","217.250.166.129",JSON.stringify({lat:1.234,lng:0.1234})).then(
	res => console.log(res)
).catch(
	err => console.log(err)
)
*/

/*
			GeoLocModel.getByUsername(req.userdata.username).then(
				(obj) => {
				if (obj != null && obj["known_ip"] === req.ip){
						req.userdata.location = obj["location"]
					}else{
						reestimate_user_location(req)
					}
				}
			)
			*/

/*
async function reestimate_user_location(req) {
	const res = await fetch(`https://ipwho.is/${req.ip}`)
	console.log(res)
	
	var loc_str = ""
	GeoLocModel.setByUsername(req.userdata.username,req.ip,loc_str).then()
	return;
}
*/

===========NPM=============

npm install mysql2 express uid express-session express-mysql-session passport crypto connect-timeout ajv

#--npm cache clean --force














///////////////helpme

//MMSB3 JOIN_QUEUE	
router.put(
	"/queue/",
	AuthorizationAssertions.assert_user_auth,
	(req,res,next) => {
		const queue_data_elm = {
			"region":{"lat":0, "lng":0},
			"modes":[]
		}
		
		
		//if no region given in body try to fetch via ip
		if(req.body.region == null) {
			
		}
		//if region given in body check and copy
		if (typeof(req.body.region["lat"]) === "number" && typeof(req.body.region["lng"]) === "number"){
			queue_data_elm.region = req.body.region;
		}
		//else region stays 0,0

		
		
		//regex for mode names (identifier "-" numbers delimited by "v")
		const mode_regex = ".*-\b\d+(?:v\d+))*\b"
		if(req.body.modes == null) {
			queue_data_elm.modes = null;
		}else if(typeof obj[Symbol.iterator] !== 'function') {
			return false;
		}else{
			for(let mode of modes){
				if (typeof mode !== "string"){
					const err = new Error(`mode ${mode} invalid, make sure it is string`)
        			err.name = "UnprocessableContent"
        			return next(err)
				} else if (mode.match(mode_regex).length <=0) {
					const err = new Error(`mode ${mode} invalid, make sure region matches regex : ${mode_regex}`)
					err.name = "UnprocessableContent"
					return next(err)
				}
			}
		}
		const err = new Error(`region invalid, make sure region matches TODO`)
        	err.name = "UnprocessableContent"
        	return next(err)
		return true;
		
		
		
		
		
		
		
		if (is_region_valid(req.body["region"])){
			queue_data_elm["region"] = req.body["region"]
		}else{
			const err = new Error(`region invalid, make sure region matches TODO`)
        	err.name = "UnprocessableContent"
        	return next(err)
		}
		
		if (is_modes_valid(req.body["modes"])){
			queue_data_elm["modes"] = req.body["modes"]
		}else{
			const err = new Error(`modes invalid, make sure mode ends in "-" followed by integers > 0 delimted by "v"`)
        	err.name = "UnprocessableContent"
        	return next(err)
		}
	

			if (body.region == null){
				
			}
				
	
	},
	ContentAssertions.assert_queue_data_schema, // conforms to queue_data.json
);
///////////


return(Object.values(queue.hosts_grouped_servers)).flat()



	modes : () => {
		return queue.servers().concat(queue.players)
		.map(x => x.modes).flat()
		.filter((v,i,a)=> a.indexOf(v)==i && v != null ) // unique items
	},