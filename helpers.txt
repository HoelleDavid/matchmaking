docker run --name mysql_mm_db -p 3306:3306 -e -d mysql/mysql-server:latest
docker logs mysql 2>&1 | grep GENERATED
ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';

CREATE USER 'root'@'ip_address' IDENTIFIED BY 'some_pass';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'ip_address';


============JS=============

require("dotenv").config({ path: "./express_rest_backend/.env"});

INSTEAD OF USING CALLBACKS I CAN USE:
let p = promise(
    (resolove,reject) => {
        if(resolveCondition){
            resolove("someSuccess");
        }else{
            reject("someError");
        }
    }
);

p.then(funcToCallIfResolved).catch(funcToCallIfRejected);



===========NPM=============

npm install mysql2 express uid express-session express-mysql-session passport crypto connect-timeout

#--npm cache clean --force



Abstract
    Goal:   
        - Thesis: Most (UDP-based) multiplayer games benefit from a REST-API to handle user authentification, matchmaking and user persistent data.
        - Implement such an API.
        - Discuss the vulnlerabilities

    Challenges:
        authentification & security:
            - matchmaking server user
            - server architecture & match server
    Implementation:
        - mysql / passport / express interaction
        - user verification with hash & salt
            - on the matchmaking server
            - when assigning match servers  
        - matchmaking strategy (which player to assign to which server) on the ELO example
    Testing:
        - register, login and logout
        - matchmaking


    Discussion
        - porting to game distribution services (passport-steam f.e.)


Abstract:
Most multiplayer games rely on a UDP connection to optimize the speed at wich Players obtain updates in the state of the game.
The nature of UDP connections does not allow for certain delivery of packets of data, which is the main benefit of TCP.
Naturally there is a ussage for both in the development of online multiplayer games.
Managing players aswell as corresponding player data and important actions depends to some extent the implementation of a TCP based API.
Nodejs provides numerous libraries to help develop JavaScript applications. More specifically express, a library to handle REST-API calls, passport to authenticate users and mysql2 to easily mask MYSQL database queries.
Combined those allow for a simplified implementation of some nessecary components of multiplayer games, like identifying players, grouping players into matches (matchmaking) and handling player persistent data.
The goal of this paper is to discuss the challenges in development and ussage of a matchmaking server.

Thesis: Most (UDP-based) multiplayer games benefit from a REST-API to handle player and server authentification, matchmaking and persistent data.





Concepts and acronyms:
user:       an entity that can be verified by the matchmaking server.
player:     an entity that can participate in matches.
match:      an instance of the game players want to participate in. Run on the MS.
matchmaking:     the process of assigning players to matches
matchmaking server (MMS):      the application responisble for:
    - user authentification
    - matchmaking
match server (MS):   the application responsible for:
    - allowing players to play the game
    - report important events in the game to the MMS.