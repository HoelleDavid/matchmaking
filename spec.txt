MServer States

	S0 Idle
	S1 PlayersLoading
	S2 MatchInProgress



Client States

	C0 Idle
	C1 Matching
	C2 MatchConfirmed
	C3 InMatch


C0->C1: 		    HTTP Request
C1->C2 and S0->S1: 	HTTP Response MatchFound(MatchConfig) instead of LookingForMatch
			        Socket Connect and send Auth
C2->C3 and S1->S2:	Socket MatchStarting
C3->C0 and S2->S0:	HTTP Response MatchComplete(MatchData)
			        Socket Close






{ "type":"MatchConfig",					#Match metadata
  "address":String,
  "matchId":String,
  "factions":[String],
  "nicknames":[String],
	...
}


REST CLI - MMS

{ "type":"Login", "username":String, "password":String }
{ "type":"Register", "username":String, "password":String, "serverUser":String }

{ "type":"LookForMatch", "modes":[String] } 		#Client req join queue
{ "type":"RevokeFromMatch" } 				#Client req exit queue
{ "type":"LookingForMatch" }				#Server res confirm player still in queue
{ "type":"MatchFound", ?"matchConfig":Object }		#Server res 
{ "type":"AcceptMatch" }				#Client req confirm MatchFound
{ "type":"DeclineMatch" }				#Client req dont confirm MatchFound
{ "type":"MatchConfirmed", "matchConfig":Object }	#Server res if all Players AcceptMatch




Socket	CLI - MS

{ "type":"Authenticate", } 				#Client req 
{ "type":"LoadMatchComplete" } 				#Client req 
{ "type":"MatchStarting" }				#Server res if all Players LoadMatchComplete or Timer runs out
... other game action/state specific



REST MMS - MS

{ "type":"OfferMatchServer", "address":[String], "expires":String } 		#MS req offer MS
{ "type":"RevokeMatchServer", ?"address":[String] }				#MS req revoke (?all)MS
{ "type":"PrepareMatch", "matchConfig":Object, "clientCookies":[Object] }	#MMS res accept offered MS
{ "type":"MatchComplete", "MatchData":Object }					#MS req to integrate MatchData into MMS




{ "type":"", "": }




-login/register MMS
-login/register CLI/MS
-MS provide match
-CLI find match
-MMS match tracking logic
-MS perform and report match
-MMS session disconnects












Abstract
    Goal:   
        - Thesis: Most (UDP-based) multiplayer games benefit from a REST-API to handle user authentification, matchmaking and user persistent data.
        - Implement such an API.
        - Discuss the vulnlerabilities and alternatives


    Challenges:
        authentification & security:
            - matchmaking server users and privileges
            - server architecture & match server
    Implementation:
        - mysql / passport / express interaction
        - user verification with hash & salt
            - on the matchmaking server
            - when assigning match servers  
        - matchmaking strategy (which player to assign to which server) on the ELO example
    Testing:
        - register, login and logout
        - matchmaking
	- elo system

    Discussion
        - porting to game distribution services (passport-steam f.e.)





